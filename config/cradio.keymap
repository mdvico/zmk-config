/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


&mt {
  //  flavor = "tap-preferred";
  // tapping_term_ms = <200>;
};

/ { 

  combos {
    compatible = "zmk,combos";
    combo_esc {
      timeout-ms = <50>;
      key-positions = <0 1>;
      bindings = <&kp ESC>;
    };

    combo_tab {
      timeout-ms = <50>;
      key-positions = <10 11>;
      bindings = <&kp TAB>;
    };

    combo_ralt {
      timeout-ms = <50>;
      key-positions = <17 16>;
      bindings = <&kp RALT>;
    };

    combo_lalt {
      timeout-ms = <50>;
      key-positions = <11 12>;
      bindings = <&kp LALT>;
    };

    combo_lgui {
      timeout-ms = <50>;
      key-positions = <12 13>;
      bindings = <&kp LGUI>;
    };

    combo_rgui {
      timeout-ms = <50>;
      key-positions = <17 18>;
      bindings = <&kp RGUI>;
    };

    combo_F11 {
      timeout-ms = <50>;
      key-positions = <8 9>;
      bindings = <&kp F11>;
    };

    combo_reset {
      timeout-ms = <500>;
      key-positions = <3 20 21 22 23 24>;
      bindings = <&reset>;
    };

    combo_bootloader {
      timeout-ms = <2000>;
      key-positions = <0 1 2 3 4 24>;
      bindings = <&bootloader>;
    };

  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        &kp Q         &kp W     &kp E &kp R &kp T                               &kp Y     &kp U &kp I     &kp O   &kp P 
        &kp A         &kp S     &kp D &kp F &kp G                               &kp H     &kp J &kp K     &kp L   &kp SQT
        &mt LSHIFT Z  &kp X     &kp C &kp V &kp B                               &kp N     &kp M &kp COMMA &kp DOT &mt LSHIFT RET
        &mo 1         &kp LCTRL                                                 &kp SPACE &mo 2 
        >;
    };

    left_layer {
      bindings = <
        &kp N1    &kp N2      &kp N3          &kp N4          &kp N5            &kp N6    &kp N7    &kp N8    &kp N9    &kp N0 
        &kp TAB   &kp LC(S)   &kp DQT         &kp PIPE2       &trans            &trans    &kp EQUAL &kp LBKT  &kp RBKT  &kp DEL 
        &kp ESC   &kp TILDE   &trans          &trans          &trans            &trans    &kp GRAVE &trans    &trans    &mt LSHIFT RET
        &mo 1     &kp LGUI                                                      &kp RGUI  &mo 2 
        >;
    };

    right_layer {
      bindings = <
        &kp EXCL    &kp AT      &kp HASH  &kp DLLR  &kp PRCNT                   &kp CARET &kp AMPS      &kp KP_MULTIPLY &kp LPAR  &kp RPAR 
        &trans      &kp QMARK   &kp FSLH  &kp COLON &kp SEMI                    &kp MINUS &kp KP_EQUAL  &kp LBRC        &kp RBRC  &kp BSPC
        &kp LSHIFT  &kp KP_PLUS &trans    &trans    &kp BSLH                    &kp UNDER &kp LEFT      &kp DOWN        &kp UP    &kp RIGHT
        &mo 3       &kp LCTRL                                                   &kp SPACE &mo 2 
        >;
    };  

    tri_layer {
      bindings = <
        &kp F1      &kp F2      &kp F3      &kp F4 &kp F5                       &kp F6      &kp F7       &kp F8        &kp F9          &kp F10
        &bt BT_CLR  &bt BT_PRV  &bt BT_NXT  &trans &trans                       &kp C_MUTE  &kp C_VOL_DN &kp C_VOL_UP  &kp C_PREVIOUS  &kp C_NEXT
        &kp LSHIFT  &trans      &trans      &trans &PSCRN                       &kp INS     &kp HOME     &kp PG_DN     &kp PG_UP       &kp END
        &trans      &trans                                                      &trans      &trans 
        >;
    };  

  };
};
